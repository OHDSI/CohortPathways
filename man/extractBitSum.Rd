% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Private.R
\name{extractBitSum}
\alias{extractBitSum}
\title{Extract Bit Sum}
\usage{
extractBitSum(x)
}
\arguments{
\item{x}{A positive integer. The number to be decomposed into a sum of powers of 2.}
}
\value{
A numeric vector containing the bit positions (0-indexed) corresponding to
the powers of 2 that sum up to \code{x}.
}
\description{
This function takes a positive integer and returns a numeric vector of bit positions
(using 0-indexing) that represent the powers of 2 summing to the input integer.
Essentially, it decomposes the number into its binary representation and returns
the indices of the bits that are set to 1.
}
\details{
The function first computes an upper bound for the exponent needed to represent \code{x}
in binary using \code{round(log(x, base = 2) + 2)}. It then creates a vector \code{series}
containing powers of 2 from \eqn{2^0} up to \eqn{2^{lengthVar}}. In the loop, it repeatedly
finds the largest power of 2 (from the series) that is less than or equal to the current
remainder, subtracts that value, and records the corresponding bit position (adjusted for 0-indexing).
}
\examples{
extractBitSum(10)
# Returns: c(3, 1) because 10 = 2^3 + 2^1 (binary 1010)

}
